I am presenting 5 runs of embc (version 4.4 from http://www.cprover.org/ebmc/) over the or1200 verilog.  Each run was timed.  The timers and outputs are available at https://github.com/cd-public/cd-public/tree/master/UNC-CH/Research/generated%20files.  I will note that earlier this week I was concerned that counterexample output was being truncated at some point before being uploaded to git but I no longer believe that to be the case after looking over the files in greater detail.

Each experiment was performed on the or1200_top.sv file created through the manual flatten process.  Experiments could vary over:
1)  whether the GPR0 bug was patched,
2)  whether the constraints adapted from constraints.h where present as an assume property in the or1200_top.sv module, and
3)  what command line arguments were supplied to embc.

All runs indicated or1200_top as the starting module.  All runs contained the GPR0 assertion in the or1200_rf module.

I should additionally note that I have crashed ebmc this week when running over the full file as I did last week.  I believe the crash to be related to improper usage of the tool rather it's limitations with regard to file size or complexity.

The runs were performed and timed (on my desktop) somewhat hackishly with a script of the following form:

set startTime=%time%
ebmc44 or1200_top[_gpr0fix].sv --top or1200_top [--reset reset==1] [--bound 10] --trace >*.txt
echo %startTime% %time% >*.txt

Experiment 1:  "gpr0fix"

"ebmc44 or1200_top_gpr0fix.sv --top or1200_top"

1)  GPR0 bug patched
2)  Constraints present as an assume property
3)  No additional commandline arguments

This was the candidate solution we discussed on Monday.

Expected Result:  Success
Actual Result:  Success
Time:  05:02.32

Experiment 2:  "gpr0fix_noconstraint"

"ebmc44 or1200_top_gpr0fix.sv --top or1200_top"

1)  GPR0 bug patched
2)  Constraints WERE NOT present as an assume property
3)  No additional commandline arguments

This was discussed as a test case to see if the constraints were functioning as expected.  Even with the patch, with no constraints, counterexamples should exist.

Expected Result:  Failure
Actual Result:  Success
Time:  05:13.62

Discussion:  Unfortunately the main information we can get from ebmc is in the case of a counterexample which we are not getting here.  I honestly am out of theories of what could be happening here to disallow illegal instructions or whatever else is going on.

Experiment 3:  "gpr0fix_noconstraint_bound10"

"ebmc44 or1200_top_gpr0fix.sv --top or1200_top --bound 10"

1)  GPR0 bug patched
2)  Constraints WERE NOT present as an assume property
3)  "--bound 10" instructs EBMC to use bounded verification up to a bound of 10 (default: 1)

We discussed Monday that even with the default bound a counter-example should be found, but I wanted to see if I could find one by giving the checker more latitude.

Here is the cprover manual paragraph related to the "--bound" command.

"The behavior of a sequential circuit not only depends on the inputs but also on the state of any registers or flip-flops. We can instruct EBMC to perform bounded verification of a sequential circuit by giving the --bound command-line option. EBMC then tries to prove or refute the properties given as assertions in the main module within that bound. To this end, EBMC unwinds the transition system up to the user-specified bound."

Expected Result:  Failure
Actual Result:  Success
Time:  22:46.10

Discussion:  The time costs to further raise the "--bound" parameter were significant so testing did not extend beyond 10 though this result suggests that raising the parameter would not affect the result.

Experiment 4:  "nofix"

"ebmc44 or1200_top.sv --top or1200_top"

1)  GPR0 bug NOT patched
2)  Constraints present as an assume property
3)  No additional commandline arguments

This is one half of the "sanity check" testing to see if ebmc is capable of detecting bugs, namely GPR0.  It is the control for experiment 1.

Expected Result:  Failure
Actual Result:  Failure
Time:  05:15.04

Experiment 4:  "nofix_reset"

"ebmc44 or1200_top.sv --top or1200_top"

1)  GPR0 bug NOT patched
2)  Constraints present as an assume property
3)  "--reset reset==1" specifies the reset logic

On Monday, I mentioned the "--reset" option so I tested it here.  

Here is the cprover manual paragraph related to the "--reset" command:

"We can instruct EBMC to assume that the reset signal is driven in the usual fashion using the --reset command-line option. The design has positive reset logic, so the reset expression is reset==1."

Expected Result:  Failure
Actual Result:  Null
Time:  00:08.45

Discussion:  It is my impression that the "--reset" command doesn't specify whether to send a reset but rather what the reset value should be.  This is different from my expectation that it would cause the system to begin in a reset state.  I believe the Null result occurred because there was not a variable specified as "reset" in or1200 as there is in the provided example4.sv from cprover that has a "reset" variable (download link: http://www.cprover.org/ebmc/manual/tutorial/example4.sv).  
