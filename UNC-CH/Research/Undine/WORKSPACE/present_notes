Title slide
 
 
Motivation
Hardware designs may contain bugs, some of which are security critical.
 
Research ?
How can find security critical properties for hardware verification and testing?
 
Difficulties
We may have too many properties, properties unrelated to security, or properties of unneeded form.
 
Types
By typing processor events, we ameliorate all these concerns and can find security critical properties with ease.  // 114 chars
 
Typed templates
And by applying types to property templates, we can leverage existing specification miners to a security end.
 
Known properties
There are known, security critical properties that can be decomposed into processor events of certain types.
 
Temporal properties
These can include temporal properties because we use linear temporal logic for our templates.
 
Library of typed templates
Using known properties and our understanding of time, we produced a library of security associated typed templates.
 
Undine overview
Undine is the toolchain we developed to demonstrate the feasibility of our idea.
 
Processors
We tested Undine over 3 processor and found it able to accomodate all three.
 
Undine Pre
The first stage of Undine is to produce filtered traces of security events.
 
Texada
Undine then uses an extended version of the Texada miner to mine properties of a given typed template.
 
finding mor1kx exploit
We demonstrate this by finding a security critical temporal property on mor1kx.
 
explanation of exploit
We exploit this bug by changing the default and update values of the esr and triggering an exception.
 
closing slide
