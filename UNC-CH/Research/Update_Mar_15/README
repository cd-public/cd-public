Improved understanding of support/support potential:

texada@texada-VirtualBox:~/texada$ time ./texada -l -f 'x' --log-file test1.in --parse-mult-prop --conf-threshold 1 --sup-threshold 1 --print-stats --out-file test1_x.out

real    0m0.043s
user    0m0.016s
sys    0m0.003s
texada@texada-VirtualBox:~/texada$ time ./texada -l -f 'G(x)' --log-file test1.in --parse-mult-prop --conf-threshold 1 --sup-threshold 1 --print-stats --out-file test1_Gx.out

real    0m0.035s
user    0m0.004s
sys    0m0.015s

Gx -> x must hold in every event
x  -> x must hold in every trace

Support potential is the # of times a property could be falsified.

Support is the # of times a property could be falsified that it isn't.  

Any non-temporal formula is true on a trace if it is true on the first event of the trace.

--

Removing contradictions, toy:

test.in generated manually as an example.

test.out generated by the following command:

./texada -l -f 'G((a & b & !c & !d) -> (!x & y))' --log-file test2.in --parse-mult-prop --out-file test2.out

This can capture an LTL property and the notion that it does not contain contradictions, as demonstrated by the output.

--

Removing contradictions, simulation:

Using the pre-existing traces, I attempt to apply the lessons for the toy example and also study the contradictions:

texada@texada-VirtualBox:~/texada$ time ./texada -l -f 'G((!x & y))' --log-file multi.vcd --parse-mult-prop --conf-threshold .5 --out-file mutex.out --print-stats

real    0m1.713s
user    0m1.453s
sys    0m0.023s
texada@texada-VirtualBox:~/texada$ time ./texada -l -f 'G((a & b & !c & !d) -> (!x & y))' --log-file multi.vcd --parse-mult-prop --out-file multi.out

real    0m21.086s
user    0m17.790s
sys    0m0.062s

Contradictions are not detected with 100% confidence - I hope to incorporate clocks to address this (and more)

--

Diversifying LTLs and VCDs with clk and rst:

sub.vcd - not shown here - comes from a simulation generated from a number of system calls related to tasks, memory management, and IO.  I hope to expand it to exceptions.

Within, I include rst, clk, and the signals relevant to two LTL properties:

property ASSERT_B10;  // GPR0
   @(posedge clk)
((~((or1200_rf.rf_we == 1) && (or1200_rf.rf_addrw == 0))) || (or1200_rf.rf_dataw == 0));
endproperty


property ASSERT_S14;  // A bug selected to be easy to work with
	@(posedge clk)
((~((or1200_ctrl.ex_insn & 'hFFFF0000) >> 16 == 8192)) || (or1200_except.except_trig != 0));
endproperty

Manual inspection of the .vcd determined the exception handler wasn't sufficiently exercised to find S14 but, unfortunately, generating a .vcd of this complexity is a considerable time commitment (for now) so I'll come back to that.

Nevertheless, a variety of interesting things were learned.

texada@texada-VirtualBox:~/texada$ time ./texada -l -f 'G(((a & !b) &(c & !d)) -> (e & !f))' --log-file subset_asm2.vcd --parse-mult-prop --sup-threshold 1 --print-stats --out-file b10â€‹.out
real    26m20.515s
user    14m54.808s
sys    0m5.742s
texada@texada-VirtualBox:~/texada$ time ./texada -l -f 'G((a & !b) -> (c & !d))' --log-file subset_asm2.vcd --parse-mult-prop --sup-threshold 1 --print-stats --out-file s14_100.out

real    0m13.264s
user    0m11.421s
sys    0m0.059s
texada@texada-VirtualBox:~/texada$ time ./texada -l -f 'G(a -> c)' --log-file subset_asm2.vcd --parse-mult-prop --conf-threshold .5 --print-stats --out-file s14_rough.out

real    0m0.261s
user    0m0.120s
sys    0m0.012s

b10.out is ~121 MB and not shared or fully inspected, but initial inspection shows it confirms contradiction issues.

s14_100.out would likely detect s14 on a better trace - we'll see.

s14_rough provides evidence that s14 is detectable (and is detected) though contradictions are present (albeit at lower confidence).